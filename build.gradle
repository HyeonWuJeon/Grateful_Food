plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	//	id 'jacoco'
}

//apply plugin: "com.moowork.node"


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


def webappDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildReact"
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task installReact(type: Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web' //mvc
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	compile 'io.springfox:springfox-swagger2:2.6.1'
	compile 'io.springfox:springfox-swagger-ui:2.6.1'
	implementation("com.github.gavlyukovskiy:flexy-pool-spring-boot-starter:1.6.1")
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'
	compile('org.springframework.boot:spring-boot-starter-oauth2-client')
	compile("org.springframework.boot:spring-boot-starter-security")
	compile('org.springframework.session:spring-session-jdbc')

//	query - dsl
	compile("com.querydsl:querydsl-core:4.2.1")
	compile("com.querydsl:querydsl-apt:4.2.1")
	compile("com.querydsl:querydsl-jpa:4.2.1")
	compile("com.querydsl:querydsl-collections:4.2.1")


	testCompile group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.4'


	compileOnly 'org.projectlombok:lombok'
//	compile 'mysql:mysql-connector-java'

	compile 'com.h2database:h2'
//	runtime('mysql:mysql-connector-java')
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testCompile("org.springframework.security:spring-security-test")

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

}
//
//jacoco{
//	toolVersion = '0.8.4'
//}
//configure the jacoco test report
//jacocoTestReport{
//	reports{
//		html.enabled = true
//		xml.enabled = true
//		csv.enabled = true
//
//	}
//	finalizedBy 'jacocoTestCoverageVerification'
//}

test {
	useJUnitPlatform()
//	finalizedBy jacocoTestReport test task 실행때마다 자동으로 jacoco task실행

}